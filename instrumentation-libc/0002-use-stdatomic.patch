diff -ruN musl-1.2.3/arch/aarch64/atomic_arch.h musl-1.2.3.atomic/arch/aarch64/atomic_arch.h
--- musl-1.2.3/arch/aarch64/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/aarch64/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,82 +0,0 @@
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ ("ldaxr %w0,%1" : "=r"(v) : "Q"(*p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ ("stlxr %w0,%w2,%1" : "=&r"(r), "=Q"(*p) : "r"(v) : "memory");
-	return !r;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("dmb ish" : : : "memory");
-}
-
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	int old;
-	do {
-		old = a_ll(p);
-		if (old != t) {
-			a_barrier();
-			break;
-		}
-	} while (!a_sc(p, s));
-	return old;
-}
-
-#define a_ll_p a_ll_p
-static inline void *a_ll_p(volatile void *p)
-{
-	void *v;
-	__asm__ __volatile__ ("ldaxr %0, %1" : "=r"(v) : "Q"(*(void *volatile *)p));
-	return v;
-}
-
-#define a_sc_p a_sc_p
-static inline int a_sc_p(volatile int *p, void *v)
-{
-	int r;
-	__asm__ __volatile__ ("stlxr %w0,%2,%1" : "=&r"(r), "=Q"(*(void *volatile *)p) : "r"(v) : "memory");
-	return !r;
-}
-
-#define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
-{
-	void *old;
-	do {
-		old = a_ll_p(p);
-		if (old != t) {
-			a_barrier();
-			break;
-		}
-	} while (!a_sc_p(p, s));
-	return old;
-}
-
-#define a_ctz_64 a_ctz_64
-static inline int a_ctz_64(uint64_t x)
-{
-	__asm__(
-		"	rbit %0, %1\n"
-		"	clz %0, %0\n"
-		: "=r"(x) : "r"(x));
-	return x;
-}
-
-#define a_clz_64 a_clz_64
-static inline int a_clz_64(uint64_t x)
-{
-	__asm__("clz %0, %1" : "=r"(x) : "r"(x));
-	return x;
-}
diff -ruN musl-1.2.3/arch/arm/atomic_arch.h musl-1.2.3.atomic/arch/arm/atomic_arch.h
--- musl-1.2.3/arch/arm/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/arm/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,107 +0,0 @@
-#include "libc.h"
-
-#if __ARM_ARCH_4__ || __ARM_ARCH_4T__ || __ARM_ARCH == 4
-#define BLX "mov lr,pc\n\tbx"
-#else
-#define BLX "blx"
-#endif
-
-extern hidden uintptr_t __a_cas_ptr, __a_barrier_ptr;
-
-#if ((__ARM_ARCH_6__ || __ARM_ARCH_6K__ || __ARM_ARCH_6KZ__ || __ARM_ARCH_6ZK__) && !__thumb__) \
- || __ARM_ARCH_6T2__ || __ARM_ARCH_7A__ || __ARM_ARCH_7R__ || __ARM_ARCH >= 7
-
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ ("ldrex %0, %1" : "=r"(v) : "Q"(*p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ ("strex %0,%2,%1" : "=&r"(r), "=Q"(*p) : "r"(v) : "memory");
-	return !r;
-}
-
-#if __ARM_ARCH_7A__ || __ARM_ARCH_7R__ ||  __ARM_ARCH >= 7
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("dmb ish" : : : "memory");
-}
-
-#endif
-
-#define a_pre_llsc a_barrier
-#define a_post_llsc a_barrier
-
-#else
-
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	for (;;) {
-		register int r0 __asm__("r0") = t;
-		register int r1 __asm__("r1") = s;
-		register volatile int *r2 __asm__("r2") = p;
-		register uintptr_t r3 __asm__("r3") = __a_cas_ptr;
-		int old;
-		__asm__ __volatile__ (
-			BLX " r3"
-			: "+r"(r0), "+r"(r3) : "r"(r1), "r"(r2)
-			: "memory", "lr", "ip", "cc" );
-		if (!r0) return t;
-		if ((old=*p)!=t) return old;
-	}
-}
-
-#endif
-
-#ifndef a_barrier
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	register uintptr_t ip __asm__("ip") = __a_barrier_ptr;
-	__asm__ __volatile__( BLX " ip" : "+r"(ip) : : "memory", "cc", "lr" );
-}
-#endif
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__(
-#ifndef __thumb__
-		".word 0xe7f000f0"
-#else
-		".short 0xdeff"
-#endif
-		: : : "memory");
-}
-
-#if __ARM_ARCH >= 5 && (!__thumb__ || __thumb2__)
-
-#define a_clz_32 a_clz_32
-static inline int a_clz_32(uint32_t x)
-{
-	__asm__ ("clz %0, %1" : "=r"(x) : "r"(x));
-	return x;
-}
-
-#if __ARM_ARCH_6T2__ || __ARM_ARCH_7A__ || __ARM_ARCH_7R__ || __ARM_ARCH >= 7
-
-#define a_ctz_32 a_ctz_32
-static inline int a_ctz_32(uint32_t x)
-{
-	uint32_t xr;
-	__asm__ ("rbit %0, %1" : "=r"(xr) : "r"(x));
-	return a_clz_32(xr);
-}
-
-#endif
-
-#endif
diff -ruN musl-1.2.3/arch/i386/atomic_arch.h musl-1.2.3.atomic/arch/i386/atomic_arch.h
--- musl-1.2.3/arch/i386/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/i386/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,108 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__ __volatile__ (
-		"lock ; cmpxchg %3, %1"
-		: "=a"(t), "=m"(*p) : "a"(t), "r"(s) : "memory" );
-	return t;
-}
-
-#define a_swap a_swap
-static inline int a_swap(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"xchg %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_fetch_add a_fetch_add
-static inline int a_fetch_add(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; xadd %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_and a_and
-static inline void a_and(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; and %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_or a_or
-static inline void a_or(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; or %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_inc a_inc
-static inline void a_inc(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; incl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_dec a_dec
-static inline void a_dec(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; decl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_store a_store
-static inline void a_store(volatile int *p, int x)
-{
-	__asm__ __volatile__(
-		"mov %1, %0 ; lock ; orl $0,(%%esp)"
-		: "=m"(*p) : "r"(x) : "memory" );
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__( "" : : : "memory" );
-}
-
-#define a_spin a_spin
-static inline void a_spin()
-{
-	__asm__ __volatile__( "pause" : : : "memory" );
-}
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__( "hlt" : : : "memory" );
-}
-
-#define a_ctz_64 a_ctz_64
-static inline int a_ctz_64(uint64_t x)
-{
-	int r;
-	__asm__( "bsf %1,%0 ; jnz 1f ; bsf %2,%0 ; add $32,%0\n1:"
-		: "=&r"(r) : "r"((unsigned)x), "r"((unsigned)(x>>32)) );
-	return r;
-}
-
-#define a_ctz_32 a_ctz_32
-static inline int a_ctz_32(uint32_t x)
-{
-	int r;
-	__asm__( "bsf %1,%0" : "=r"(r) : "r"(x) );
-	return r;
-}
-
-#define a_clz_32 a_clz_32
-static inline int a_clz_32(uint32_t x)
-{
-	__asm__( "bsr %1,%0 ; xor $31,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
diff -ruN musl-1.2.3/arch/m68k/atomic_arch.h musl-1.2.3.atomic/arch/m68k/atomic_arch.h
--- musl-1.2.3/arch/m68k/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/m68k/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,8 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__ __volatile__ (
-		"cas.l %0, %2, (%1)"
-		: "+d"(t) : "a"(p), "d"(s) : "memory", "cc");
-	return t;
-}
diff -ruN musl-1.2.3/arch/microblaze/atomic_arch.h musl-1.2.3.atomic/arch/microblaze/atomic_arch.h
--- musl-1.2.3/arch/microblaze/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/microblaze/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,53 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	register int old, tmp;
-	__asm__ __volatile__ (
-		"	addi %0, r0, 0\n"
-		"1:	lwx %0, %2, r0\n"
-		"	rsubk %1, %0, %3\n"
-		"	bnei %1, 1f\n"
-		"	swx %4, %2, r0\n"
-		"	addic %1, r0, 0\n"
-		"	bnei %1, 1b\n"
-		"1:	"
-		: "=&r"(old), "=&r"(tmp)
-		: "r"(p), "r"(t), "r"(s)
-		: "cc", "memory" );
-	return old;
-}
-
-#define a_swap a_swap
-static inline int a_swap(volatile int *x, int v)
-{
-	register int old, tmp;
-	__asm__ __volatile__ (
-		"	addi %0, r0, 0\n"
-		"1:	lwx %0, %2, r0\n"
-		"	swx %3, %2, r0\n"
-		"	addic %1, r0, 0\n"
-		"	bnei %1, 1b\n"
-		"1:	"
-		: "=&r"(old), "=&r"(tmp)
-		: "r"(x), "r"(v)
-		: "cc", "memory" );
-	return old;
-}
-
-#define a_fetch_add a_fetch_add
-static inline int a_fetch_add(volatile int *x, int v)
-{
-	register int new, tmp;
-	__asm__ __volatile__ (
-		"	addi %0, r0, 0\n"
-		"1:	lwx %0, %2, r0\n"
-		"	addk %0, %0, %3\n"
-		"	swx %0, %2, r0\n"
-		"	addic %1, r0, 0\n"
-		"	bnei %1, 1b\n"
-		"1:	"
-		: "=&r"(new), "=&r"(tmp)
-		: "r"(x), "r"(v)
-		: "cc", "memory" );
-	return new-v;
-}
diff -ruN musl-1.2.3/arch/mips/atomic_arch.h musl-1.2.3.atomic/arch/mips/atomic_arch.h
--- musl-1.2.3/arch/mips/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/mips/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,58 +0,0 @@
-#if __mips_isa_rev < 6
-#define LLSC_M "m"
-#else
-#define LLSC_M "ZC"
-#endif
-
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-#if __mips < 2
-	__asm__ __volatile__ (
-		".set push ; .set mips2\n\t"
-		"ll %0, %1"
-		"\n\t.set pop"
-		: "=r"(v) : "m"(*p));
-#else
-	__asm__ __volatile__ (
-		"ll %0, %1"
-		: "=r"(v) : LLSC_M(*p));
-#endif
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-#if __mips < 2
-	__asm__ __volatile__ (
-		".set push ; .set mips2\n\t"
-		"sc %0, %1"
-		"\n\t.set pop"
-		: "=r"(r), "=m"(*p) : "0"(v) : "memory");
-#else
-	__asm__ __volatile__ (
-		"sc %0, %1"
-		: "=r"(r), "="LLSC_M(*p) : "0"(v) : "memory");
-#endif
-	return r;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-#if __mips < 2
-	/* mips2 sync, but using too many directives causes
-	 * gcc not to inline it, so encode with .long instead. */
-	__asm__ __volatile__ (".long 0xf" : : : "memory");
-#else
-	__asm__ __volatile__ ("sync" : : : "memory");
-#endif
-}
-
-#define a_pre_llsc a_barrier
-#define a_post_llsc a_barrier
-
-#undef LLSC_M
diff -ruN musl-1.2.3/arch/mips64/atomic_arch.h musl-1.2.3.atomic/arch/mips64/atomic_arch.h
--- musl-1.2.3/arch/mips64/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/mips64/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,56 +0,0 @@
-#if __mips_isa_rev < 6
-#define LLSC_M "m"
-#else
-#define LLSC_M "ZC"
-#endif
-
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ (
-		"ll %0, %1"
-		: "=r"(v) : LLSC_M(*p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ (
-		"sc %0, %1"
-		: "=r"(r), "="LLSC_M(*p) : "0"(v) : "memory");
-	return r;
-}
-
-#define a_ll_p a_ll_p
-static inline void *a_ll_p(volatile void *p)
-{
-	void *v;
-	__asm__ __volatile__ (
-		"lld %0, %1"
-		: "=r"(v) : LLSC_M(*(void *volatile *)p));
-	return v;
-}
-
-#define a_sc_p a_sc_p
-static inline int a_sc_p(volatile void *p, void *v)
-{
-	long r;
-	__asm__ __volatile__ (
-		"scd %0, %1"
-		: "=r"(r), "="LLSC_M(*(void *volatile *)p) : "0"(v) : "memory");
-	return r;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("sync" : : : "memory");
-}
-
-#define a_pre_llsc a_barrier
-#define a_post_llsc a_barrier
-
-#undef LLSC_M
diff -ruN musl-1.2.3/arch/mipsn32/atomic_arch.h musl-1.2.3.atomic/arch/mipsn32/atomic_arch.h
--- musl-1.2.3/arch/mipsn32/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/mipsn32/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,52 +0,0 @@
-#if __mips_isa_rev < 6
-#define LLSC_M "m"
-#else
-#define LLSC_M "ZC"
-#endif
-
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-#if __mips < 2
-	__asm__ __volatile__ (
-		".set push ; .set mips2\n\t"
-		"ll %0, %1"
-		"\n\t.set pop"
-		: "=r"(v) : "m"(*p));
-#else
-	__asm__ __volatile__ (
-		"ll %0, %1"
-		: "=r"(v) : LLSC_M(*p));
-#endif
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-#if __mips < 2
-	__asm__ __volatile__ (
-		".set push ; .set mips2\n\t"
-		"sc %0, %1"
-		"\n\t.set pop"
-		: "=r"(r), "=m"(*p) : "0"(v) : "memory");
-#else
-	__asm__ __volatile__ (
-		"sc %0, %1"
-		: "=r"(r), "="LLSC_M(*p) : "0"(v) : "memory");
-#endif
-	return r;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("sync" : : : "memory");
-}
-
-#define a_pre_llsc a_barrier
-#define a_post_llsc a_barrier
-
-#undef LLSC_M
diff -ruN musl-1.2.3/arch/or1k/atomic_arch.h musl-1.2.3.atomic/arch/or1k/atomic_arch.h
--- musl-1.2.3/arch/or1k/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/or1k/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,14 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__("1:	l.lwa %0, %1\n"
-		"	l.sfeq %0, %2\n"
-		"	l.bnf 1f\n"
-		"	 l.nop\n"
-		"	l.swa %1, %3\n"
-		"	l.bnf 1b\n"
-		"	 l.nop\n"
-		"1:	\n"
-		: "=&r"(t), "+m"(*p) : "r"(t), "r"(s) : "cc", "memory" );
-        return t;
-}
diff -ruN musl-1.2.3/arch/powerpc/atomic_arch.h musl-1.2.3.atomic/arch/powerpc/atomic_arch.h
--- musl-1.2.3/arch/powerpc/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/powerpc/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,38 +0,0 @@
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ ("lwarx %0, 0, %2" : "=r"(v) : "m"(*p), "r"(p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ (
-		"stwcx. %2, 0, %3 ; mfcr %0"
-		: "=r"(r), "=m"(*p) : "r"(v), "r"(p) : "memory", "cc");
-	return r & 0x20000000; /* "bit 2" of "cr0" (backwards bit order) */
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("sync" : : : "memory");
-}
-
-#define a_pre_llsc a_barrier
-
-#define a_post_llsc a_post_llsc
-static inline void a_post_llsc()
-{
-	__asm__ __volatile__ ("isync" : : : "memory");
-}
-
-#define a_clz_32 a_clz_32
-static inline int a_clz_32(uint32_t x)
-{
-	__asm__ ("cntlzw %0, %1" : "=r"(x) : "r"(x));
-	return x;
-}
diff -ruN musl-1.2.3/arch/powerpc64/atomic_arch.h musl-1.2.3.atomic/arch/powerpc64/atomic_arch.h
--- musl-1.2.3/arch/powerpc64/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/powerpc64/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,62 +0,0 @@
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ ("lwarx %0, 0, %2" : "=r"(v) : "m"(*p), "r"(p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ (
-		"stwcx. %2, 0, %3 ; mfcr %0"
-		: "=r"(r), "=m"(*p) : "r"(v), "r"(p) : "memory", "cc");
-	return r & 0x20000000; /* "bit 2" of "cr0" (backwards bit order) */
-}
-
-#define a_ll_p a_ll_p
-static inline void *a_ll_p(volatile void *p)
-{
-	void *v;
-	__asm__ __volatile__ ("ldarx %0, 0, %2" : "=r"(v) : "m"(*(void *volatile *)p), "r"(p));
-	return v;
-}
-
-#define a_sc_p a_sc_p
-static inline int a_sc_p(volatile void *p, void *v)
-{
-	int r;
-	__asm__ __volatile__ (
-		"stdcx. %2, 0, %3 ; mfcr %0"
-		: "=r"(r), "=m"(*(void *volatile *)p) : "r"(v), "r"(p) : "memory", "cc");
-	return r & 0x20000000; /* "bit 2" of "cr0" (backwards bit order) */
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("sync" : : : "memory");
-}
-
-#define a_pre_llsc a_barrier
-
-#define a_post_llsc a_post_llsc
-static inline void a_post_llsc()
-{
-	__asm__ __volatile__ ("isync" : : : "memory");
-}
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__ (".long 0");
-}
-
-#define a_clz_64 a_clz_64
-static inline int a_clz_64(uint64_t x)
-{
-	__asm__ ("cntlzd %0, %1" : "=r"(x) : "r"(x));
-	return x;
-}
diff -ruN musl-1.2.3/arch/riscv64/atomic_arch.h musl-1.2.3.atomic/arch/riscv64/atomic_arch.h
--- musl-1.2.3/arch/riscv64/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/riscv64/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,38 +0,0 @@
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("fence rw,rw" : : : "memory");
-}
-
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	int old, tmp;
-	__asm__ __volatile__ (
-		"\n1:	lr.w.aqrl %0, (%2)\n"
-		"	bne %0, %3, 1f\n"
-		"	sc.w.aqrl %1, %4, (%2)\n"
-		"	bnez %1, 1b\n"
-		"1:"
-		: "=&r"(old), "=&r"(tmp)
-		: "r"(p), "r"((long)t), "r"((long)s)
-		: "memory");
-	return old;
-}
-
-#define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
-{
-	void *old;
-	int tmp;
-	__asm__ __volatile__ (
-		"\n1:	lr.d.aqrl %0, (%2)\n"
-		"	bne %0, %3, 1f\n"
-		"	sc.d.aqrl %1, %4, (%2)\n"
-		"	bnez %1, 1b\n"
-		"1:"
-		: "=&r"(old), "=&r"(tmp)
-		: "r"(p), "r"(t), "r"(s)
-		: "memory");
-	return old;
-}
diff -ruN musl-1.2.3/arch/s390x/atomic_arch.h musl-1.2.3.atomic/arch/s390x/atomic_arch.h
--- musl-1.2.3/arch/s390x/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/s390x/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,30 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__ __volatile__ (
-		"cs %0, %2, %1"
-		: "+d"(t), "+Q"(*p) : "d"(s) : "memory", "cc");
-	return t;
-}
-
-#define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
-{
-	__asm__ __volatile__ (
-		"csg %0, %2, %1"
-		: "+d"(t), "+Q"(*(void *volatile *)p) : "d"(s)
-		: "memory", "cc");
-	return t;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("bcr 15,0" : : : "memory");
-}
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__ (".insn e,0");
-}
diff -ruN musl-1.2.3/arch/sh/atomic_arch.h musl-1.2.3.atomic/arch/sh/atomic_arch.h
--- musl-1.2.3/arch/sh/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/sh/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,48 +0,0 @@
-#include "libc.h"
-
-#if defined(__SH4A__)
-
-#define a_ll a_ll
-static inline int a_ll(volatile int *p)
-{
-	int v;
-	__asm__ __volatile__ ("movli.l @%1, %0" : "=z"(v) : "r"(p), "m"(*p));
-	return v;
-}
-
-#define a_sc a_sc
-static inline int a_sc(volatile int *p, int v)
-{
-	int r;
-	__asm__ __volatile__ (
-		"movco.l %2, @%3 ; movt %0"
-		: "=r"(r), "=m"(*p) : "z"(v), "r"(p) : "memory", "cc");
-	return r;
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__ ("synco" ::: "memory");
-}
-
-#define a_pre_llsc a_barrier
-#define a_post_llsc a_barrier
-
-#else
-
-#define a_cas a_cas
-extern hidden const void *__sh_cas_ptr;
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	register int r1 __asm__("r1");
-	register int r2 __asm__("r2") = t;
-	register int r3 __asm__("r3") = s;
-	__asm__ __volatile__ (
-		"jsr @%4 ; nop"
-		: "=r"(r1), "+r"(r3) : "z"(p), "r"(r2), "r"(__sh_cas_ptr)
-		: "memory", "pr", "cc");
-	return r3;
-}
-
-#endif
diff -ruN musl-1.2.3/arch/x32/atomic_arch.h musl-1.2.3.atomic/arch/x32/atomic_arch.h
--- musl-1.2.3/arch/x32/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/x32/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,121 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__ __volatile__ (
-		"lock ; cmpxchg %3, %1"
-		: "=a"(t), "=m"(*p) : "a"(t), "r"(s) : "memory" );
-	return t;
-}
-
-#define a_swap a_swap
-static inline int a_swap(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"xchg %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_fetch_add a_fetch_add
-static inline int a_fetch_add(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; xadd %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_and a_and
-static inline void a_and(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; and %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_or a_or
-static inline void a_or(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; or %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_and_64 a_and_64
-static inline void a_and_64(volatile uint64_t *p, uint64_t v)
-{
-	__asm__ __volatile(
-		"lock ; and %1, %0"
-		 : "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_or_64 a_or_64
-static inline void a_or_64(volatile uint64_t *p, uint64_t v)
-{
-	__asm__ __volatile__(
-		"lock ; or %1, %0"
-		 : "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_inc a_inc
-static inline void a_inc(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; incl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_dec a_dec
-static inline void a_dec(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; decl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_store a_store
-static inline void a_store(volatile int *p, int x)
-{
-	__asm__ __volatile__(
-		"mov %1, %0 ; lock ; orl $0,(%%rsp)"
-		: "=m"(*p) : "r"(x) : "memory" );
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__( "" : : : "memory" );
-}
-
-#define a_spin a_spin
-static inline void a_spin()
-{
-	__asm__ __volatile__( "pause" : : : "memory" );
-}
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__( "hlt" : : : "memory" );
-}
-
-#define a_ctz_64 a_ctz_64
-static inline int a_ctz_64(uint64_t x)
-{
-	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
-
-#define a_ctz_32 a_ctz_32
-static inline int a_ctz_32(uint32_t x)
-{
-	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
-
-#define a_clz_64 a_clz_64
-static inline int a_clz_64(uint64_t x)
-{
-	__asm__( "bsr %1,%0 ; xor $63,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
diff -ruN musl-1.2.3/arch/x86_64/atomic_arch.h musl-1.2.3.atomic/arch/x86_64/atomic_arch.h
--- musl-1.2.3/arch/x86_64/atomic_arch.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/arch/x86_64/atomic_arch.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,123 +0,0 @@
-#define a_cas a_cas
-static inline int a_cas(volatile int *p, int t, int s)
-{
-	__asm__ __volatile__ (
-		"lock ; cmpxchg %3, %1"
-		: "=a"(t), "=m"(*p) : "a"(t), "r"(s) : "memory" );
-	return t;
-}
-
-#define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
-{
-	__asm__( "lock ; cmpxchg %3, %1"
-		: "=a"(t), "=m"(*(void *volatile *)p)
-		: "a"(t), "r"(s) : "memory" );
-	return t;
-}
-
-#define a_swap a_swap
-static inline int a_swap(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"xchg %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_fetch_add a_fetch_add
-static inline int a_fetch_add(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; xadd %0, %1"
-		: "=r"(v), "=m"(*p) : "0"(v) : "memory" );
-	return v;
-}
-
-#define a_and a_and
-static inline void a_and(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; and %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_or a_or
-static inline void a_or(volatile int *p, int v)
-{
-	__asm__ __volatile__(
-		"lock ; or %1, %0"
-		: "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_and_64 a_and_64
-static inline void a_and_64(volatile uint64_t *p, uint64_t v)
-{
-	__asm__ __volatile(
-		"lock ; and %1, %0"
-		 : "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_or_64 a_or_64
-static inline void a_or_64(volatile uint64_t *p, uint64_t v)
-{
-	__asm__ __volatile__(
-		"lock ; or %1, %0"
-		 : "=m"(*p) : "r"(v) : "memory" );
-}
-
-#define a_inc a_inc
-static inline void a_inc(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; incl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_dec a_dec
-static inline void a_dec(volatile int *p)
-{
-	__asm__ __volatile__(
-		"lock ; decl %0"
-		: "=m"(*p) : "m"(*p) : "memory" );
-}
-
-#define a_store a_store
-static inline void a_store(volatile int *p, int x)
-{
-	__asm__ __volatile__(
-		"mov %1, %0 ; lock ; orl $0,(%%rsp)"
-		: "=m"(*p) : "r"(x) : "memory" );
-}
-
-#define a_barrier a_barrier
-static inline void a_barrier()
-{
-	__asm__ __volatile__( "" : : : "memory" );
-}
-
-#define a_spin a_spin
-static inline void a_spin()
-{
-	__asm__ __volatile__( "pause" : : : "memory" );
-}
-
-#define a_crash a_crash
-static inline void a_crash()
-{
-	__asm__ __volatile__( "hlt" : : : "memory" );
-}
-
-#define a_ctz_64 a_ctz_64
-static inline int a_ctz_64(uint64_t x)
-{
-	__asm__( "bsf %1,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
-
-#define a_clz_64 a_clz_64
-static inline int a_clz_64(uint64_t x)
-{
-	__asm__( "bsr %1,%0 ; xor $63,%0" : "=r"(x) : "r"(x) );
-	return x;
-}
diff -ruN musl-1.2.3/src/internal/atomic.h musl-1.2.3.atomic/src/internal/atomic.h
--- musl-1.2.3/src/internal/atomic.h	2022-04-07 12:12:40.000000000 -0500
+++ musl-1.2.3.atomic/src/internal/atomic.h	2022-09-13 13:18:09.194178052 -0500
@@ -2,181 +2,59 @@
 #define _ATOMIC_H
 
 #include <stdint.h>
-
-#include "atomic_arch.h"
-
-#ifdef a_ll
-
-#ifndef a_pre_llsc
-#define a_pre_llsc()
-#endif
-
-#ifndef a_post_llsc
-#define a_post_llsc()
-#endif
-
-#ifndef a_cas
-#define a_cas a_cas
+#include <stdatomic.h>
 static inline int a_cas(volatile int *p, int t, int s)
 {
-	int old;
-	a_pre_llsc();
-	do old = a_ll(p);
-	while (old==t && !a_sc(p, s));
-	a_post_llsc();
-	return old;
-}
-#endif
-
-#ifndef a_swap
-#define a_swap a_swap
-static inline int a_swap(volatile int *p, int v)
-{
-	int old;
-	a_pre_llsc();
-	do old = a_ll(p);
-	while (!a_sc(p, v));
-	a_post_llsc();
-	return old;
-}
-#endif
-
-#ifndef a_fetch_add
-#define a_fetch_add a_fetch_add
-static inline int a_fetch_add(volatile int *p, int v)
-{
-	int old;
-	a_pre_llsc();
-	do old = a_ll(p);
-	while (!a_sc(p, (unsigned)old + v));
-	a_post_llsc();
-	return old;
-}
-#endif
-
-#ifndef a_fetch_and
-#define a_fetch_and a_fetch_and
-static inline int a_fetch_and(volatile int *p, int v)
-{
-	int old;
-	a_pre_llsc();
-	do old = a_ll(p);
-	while (!a_sc(p, old & v));
-	a_post_llsc();
-	return old;
-}
-#endif
-
-#ifndef a_fetch_or
-#define a_fetch_or a_fetch_or
-static inline int a_fetch_or(volatile int *p, int v)
-{
-	int old;
-	a_pre_llsc();
-	do old = a_ll(p);
-	while (!a_sc(p, old | v));
-	a_post_llsc();
-	return old;
+	atomic_compare_exchange_strong((_Atomic int*)p, &t, s);
+	return t;
 }
-#endif
 
-#endif
-
-#ifdef a_ll_p
-
-#ifndef a_cas_p
 #define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
+static inline void *a_cas_p(volatile _Atomic(void *) *p, void *t, void *s)
 {
-	void *old;
-	a_pre_llsc();
-	do old = a_ll_p(p);
-	while (old==t && !a_sc_p(p, s));
-	a_post_llsc();
-	return old;
+	atomic_compare_exchange_strong(p, &t, s);
+	return t;
 }
-#endif
 
-#endif
-
-#ifndef a_cas
-#error missing definition of a_cas
-#endif
-
-#ifndef a_swap
-#define a_swap a_swap
 static inline int a_swap(volatile int *p, int v)
 {
-	int old;
-	do old = *p;
-	while (a_cas(p, old, v) != old);
-	return old;
+	return atomic_exchange((_Atomic int*)p, v);
 }
-#endif
 
-#ifndef a_fetch_add
-#define a_fetch_add a_fetch_add
 static inline int a_fetch_add(volatile int *p, int v)
 {
-	int old;
-	do old = *p;
-	while (a_cas(p, old, (unsigned)old+v) != old);
-	return old;
+	return atomic_fetch_add((_Atomic int*)p, v);
 }
-#endif
 
-#ifndef a_fetch_and
-#define a_fetch_and a_fetch_and
 static inline int a_fetch_and(volatile int *p, int v)
 {
-	int old;
-	do old = *p;
-	while (a_cas(p, old, old&v) != old);
-	return old;
+	return atomic_fetch_and((_Atomic int*)p, v);
 }
-#endif
-#ifndef a_fetch_or
-#define a_fetch_or a_fetch_or
+
 static inline int a_fetch_or(volatile int *p, int v)
 {
-	int old;
-	do old = *p;
-	while (a_cas(p, old, old|v) != old);
-	return old;
+	return atomic_fetch_or((_Atomic int*)p, v);
 }
-#endif
 
-#ifndef a_and
-#define a_and a_and
-static inline void a_and(volatile int *p, int v)
+static inline int a_and(volatile int *p, int v)
 {
-	a_fetch_and(p, v);
+	return atomic_fetch_and((_Atomic int*)p, v);
 }
-#endif
 
-#ifndef a_or
-#define a_or a_or
-static inline void a_or(volatile int *p, int v)
+static inline int a_or(volatile int *p, int v)
 {
-	a_fetch_or(p, v);
+	return atomic_fetch_or((_Atomic int*)p, v);
 }
-#endif
 
-#ifndef a_inc
-#define a_inc a_inc
-static inline void a_inc(volatile int *p)
+static inline a_inc(volatile int *p)
 {
-	a_fetch_add(p, 1);
+	return atomic_fetch_add((_Atomic int*)p, 1);
 }
-#endif
 
-#ifndef a_dec
-#define a_dec a_dec
-static inline void a_dec(volatile int *p)
+static inline a_dec(volatile int *p)
 {
-	a_fetch_add(p, -1);
+	return atomic_fetch_add((_Atomic int*)p, -1);
 }
-#endif
 
 #ifndef a_store
 #define a_store a_store
@@ -225,15 +103,6 @@
 }
 #endif
 
-#ifndef a_cas_p
-typedef char a_cas_p_undefined_but_pointer_not_32bit[-sizeof(char) == 0xffffffff ? 1 : -1];
-#define a_cas_p a_cas_p
-static inline void *a_cas_p(volatile void *p, void *t, void *s)
-{
-	return (void *)a_cas((volatile int *)p, (int)t, (int)s);
-}
-#endif
-
 #ifndef a_or_l
 #define a_or_l a_or_l
 static inline void a_or_l(volatile void *p, long v)
@@ -247,7 +116,7 @@
 #define a_crash a_crash
 static inline void a_crash()
 {
-	*(volatile char *)0=0;
+	__builtin_trap();
 }
 #endif
 
