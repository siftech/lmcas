diff --git a/.gitignore b/.gitignore
index da443be..6ff235f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,7 @@
 gowllvm
-examples/nodejs
\ No newline at end of file
+examples/nodejs
+
+/gclang
+/gclang++
+/get-bc
+/asdf
diff --git a/Makefile b/Makefile
index f2a12fc..f53181c 100644
--- a/Makefile
+++ b/Makefile
@@ -1,4 +1,8 @@
-all: help
+SOURCES := $(shell find -name "*.go" -print)
+CMD := github.com/SRI-CSL/gllvm/cmd
+SOURCES := $(shell find -name "*.go" -print)
+
+all: build
 
 
 help:
@@ -19,6 +23,17 @@ install: develop
 develop:
 	go install github.com/SRI-CSL/gllvm/cmd/...
 
+build: gclang gclang++ get-bc
+
+gclang: $(SOURCES)
+	go build $(CMD)/$@
+
+gclang++: $(SOURCES)
+	go build $(CMD)/$@
+
+get-bc: $(SOURCES)
+	go build $(CMD)/$@
+
 
 check: develop
 	 go test -v ./tests
diff --git a/go.mod b/go.mod
index e33929d..d66d717 100644
--- a/go.mod
+++ b/go.mod
@@ -1,3 +1,5 @@
 module github.com/SRI-CSL/gllvm
 
 go 1.16
+
+require github.com/pkg/errors v0.9.1
diff --git a/go.sum b/go.sum
new file mode 100644
index 0000000..7c401c3
--- /dev/null
+++ b/go.sum
@@ -0,0 +1,2 @@
+github.com/pkg/errors v0.9.1 h1:FEBLx1zS214owpjy7qsBeixbURkuhQAwrK5UwLGTwt4=
+github.com/pkg/errors v0.9.1/go.mod h1:bwawxfHBFNV+L2hUp1rHADufV3IMtnDRdf1r5NINEl0=
diff --git a/shared/compiler.go b/shared/compiler.go
index 8192583..b9f0261 100644
--- a/shared/compiler.go
+++ b/shared/compiler.go
@@ -34,6 +34,7 @@
 package shared
 
 import (
+    "fmt"
 	"io"
 	"io/ioutil"
 	"os"
@@ -42,6 +43,8 @@ import (
 	"runtime"
 	"strings"
 	"sync"
+    "github.com/pkg/errors"
+    "encoding/json"
 )
 
 type bitcodeToObjectLink struct {
@@ -95,6 +98,7 @@ func Compile(args []string, compiler string) (exitCode int) {
 			for _, link := range bcObjLinks {
 				attachBitcodePathToObject(link.bcPath, link.objPath)
 			}
+
 			if !pr.IsCompileOnly {
 				compileTimeLinkFiles(compilerExecName, pr, newObjectFiles)
 			}
@@ -132,6 +136,55 @@ func buildAndAttachBitcode(compilerExecName string, pr ParserResult, bcObjLinks
 	}
 }
 
+func attachLinkerArgsToObject(args []string, objFile string) (err error) {
+	var attachCmd string
+	var attachCmdArgs []string
+
+    // open a temp file for writing
+	tmpFile, err := ioutil.TempFile("", "gllvm")
+    if err != nil {
+        err = errors.Wrap(err, "could not create temp file for writing linker args into")
+        return err
+    }
+
+    // fill in the linker flags
+    e := json.NewEncoder(tmpFile)
+    err = e.Encode(args)
+    if err != nil {
+        err = errors.Wrap(err, "could not write arguments as json into the temp file")
+        return err
+    }
+
+    err = tmpFile.Close()
+    if err != nil {
+        err = errors.Wrap(err, "could not close temp file")
+        return err
+    }
+
+    // write it using objcopy
+    if len(LLVMObjcopy) > 0 {
+        attachCmd = LLVMObjcopy
+    } else {
+        attachCmd = "objcopy"
+    }
+    attachCmdArgs = []string{
+        "--remove-section=" + ELFLinkerFlagsSectionName,
+        "--add-section",
+        ELFLinkerFlagsSectionName + "=" + tmpFile.Name(),
+        objFile,
+    }
+
+    LogDebug("calling objcopy")
+
+	_, nerr := execCmd(attachCmd, attachCmdArgs, "")
+	if nerr != nil {
+        nerr = errors.Wrap(nerr, "could not inject linker flags into file")
+		return nerr
+	}
+
+    return nil
+}
+
 func attachBitcodePathToObject(bcFile, objFile string) (success bool) {
 	success = false
 	// We can only attach a bitcode path to certain file types
@@ -307,7 +360,10 @@ func execCompile(compilerExecName string, pr ParserResult, wg *sync.WaitGroup, o
 	// start afresh
 	arguments := []string{}
 	// we are linking rather than compiling
-	if len(pr.InputFiles) == 0 && len(pr.LinkArgs) > 0 {
+    // TODO: is this enough to determine this? do we need more heuristics?
+    isLinking := len(pr.InputFiles) == 0 && len(pr.LinkArgs) > 0
+
+	if isLinking {
 		if pr.IsLTO {
 			arguments = append(arguments, LLVMLtoLDFLAGS...)
 		}
@@ -335,6 +391,11 @@ func execCompile(compilerExecName string, pr ParserResult, wg *sync.WaitGroup, o
 		LogError("Failed to compile using given arguments:\n%v %v\nexit status: %v\n", compilerExecName, arguments, err)
 		*ok = false
 	}
+
+    if isLinking {
+        LogDebug(fmt.Sprintf("stuffing linker flags into final executable: args=%v out=%v", pr.LinkArgs, pr.OutputFilename))
+        attachLinkerArgsToObject(pr.LinkArgs, pr.OutputFilename)
+    }
 }
 
 // Tries to build object file
diff --git a/shared/environment.go b/shared/environment.go
index 53969b9..fd36c1d 100644
--- a/shared/environment.go
+++ b/shared/environment.go
@@ -43,6 +43,9 @@ const (
 	//ELFSectionName is the name of our ELF section of "bitcode paths".
 	ELFSectionName = ".llvm_bc"
 
+    // ELFLinkerFlagsSectionName is the name of the ELF section for linker flags
+    ELFLinkerFlagsSectionName = ".gllvm_linker_flags"
+
 	//DarwinSegmentName is the name of our MACH-O segment of "bitcode paths".
 	DarwinSegmentName = "__WLLVM"
 
