#!/usr/bin/env bash

# Ensures that a dev shell image is available to be run, without actually
# starting one.

set -euo pipefail

# Make sure we're not running in the container.
if [[ -n "${IN_LMCAS_CONTAINER+}" ]]; then
	printf "lmcas-dev-shell should be run from the host machine.\n" >&2
	exit 1
fi

# The name of the image to pull. This is only used for new containers; delete
# your old dev shell before setting it as an environment variable.
LMCAS_IMAGE_NAME=${LMCAS_IMAGE_NAME:-ghcr.io/siftech/nix-base-image:latest}

# Get the absolute directory of the LMCAS repo.
lmcas_code_dir="$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")/../.." &> /dev/null \
	&& pwd)"

# The common prefix to give dev shell container names. We support having
# multiple dev shells on the system at once, and disambiguate between them
# using a label on the container corresponding to $lmcas_code_dir. (This is
# necessary for Jenkins, and convenient for git worktree.)
container_name_prefix="lmcas-dev"

# Find the container for the current code directory's dev shell.
container_name=$(docker container ls \
	--all \
	--filter "label=net.sift.lmcas.srcdir=$lmcas_code_dir" \
	--quiet)

if [[ -z "$container_name" ]]; then
	# There wasn't a container for the current source directory, so we
	# should create one.

	# Come up with a new container name that should be unused. There's a
	# race condition here if someone tries to create multiple dev shells at
	# once, but that should be really rare and it'd be a pain to fix while
	# still having predictable container names for the one-dev-shell case.
	i=$(docker container ls --format "{{.Names}}" \
		| (grep "^$container_name_prefix-" || true) \
		| wc -l)
	container_name="$container_name_prefix-$i"

	printf "Creating container %s...\n" "$container_name" >&2
	docker run \
		--detach \
		--label "net.sift.lmcas.srcdir=$lmcas_code_dir" \
		--name "$container_name" \
		--privileged \
		--restart unless-stopped \
		--volume "$lmcas_code_dir:/code" \
		"$LMCAS_IMAGE_NAME" nix daemon \
		>/dev/null
else
	# The container existed, but still might not have been in a good state.

	is_running=$(docker container inspect "$container_name" \
		--format "{{.State.Running}}")
	if [[ "$is_running" != "true" ]]; then
		printf "Starting container %s...\n" "$container_name" >&2
		docker start "$container_name" >/dev/null
	fi
fi

# Print the name of the container.
echo "$container_name"
